:css

  #wrapper {
    position:absolute; z-index:1;
    top:50px; bottom:0px; left:-9999px;
    width:100%;
    overflow:auto;
  }

  #scroller {
    position:absolute; z-index:1;
    /*	-webkit-touch-callout:none;*/
    -webkit-tap-highlight-color:rgba(0,0,0,0);
    width:100%;
    padding:0;
  }

  #scroller ul {
    list-style:none;
    padding:0;
    margin:0;
    width:100%;
    text-align:left;
  }

  #scroller li {
    padding:25px;
    border-bottom:1px solid #ddd;
  }


  /** Pull down styles */

  #pullDown, #pullUp {
    background:#fff;
    height:40px;
    line-height:40px;
    padding:5px 10px;
    border-bottom:1px solid #ccc;
    font-weight:bold;
    font-size:14px;
    color:#888;
  }
  #pullDown .pullDownIcon, #pullUp .pullUpIcon  {
    display:block; float:left;
    width:40px; height:40px;
    background:url(http://cubiq.org/dropbox/iscroll4/examples/pull-to-refresh/pull-icon@2x.png) 0 0 no-repeat;
    -webkit-background-size:40px 80px; background-size:40px 80px;
    -webkit-transition-property:-webkit-transform;
    -webkit-transition-duration:250ms;	
  }
  #pullDown .pullDownIcon {
    -webkit-transform:rotate(0deg) translateZ(0);
  }
  #pullUp .pullUpIcon  {
    -webkit-transform:rotate(-180deg) translateZ(0);
  }

  #pullDown.flip .pullDownIcon {
    -webkit-transform:rotate(-180deg) translateZ(0);
  }

  #pullUp.flip .pullUpIcon {
    -webkit-transform:rotate(0deg) translateZ(0);
  }

  #pullDown.loading .pullDownIcon, #pullUp.loading .pullUpIcon {
    background-position:0 100%;
    -webkit-transform:rotate(0deg) translateZ(0);
    -webkit-transition-duration:0ms;
    -webkit-animation-name:loading;
    -webkit-animation-duration:2s;
    -webkit-animation-iteration-count:infinite;
    -webkit-animation-timing-function:linear;
  }

  @-webkit-keyframes loading {
    from { -webkit-transform:rotate(0deg) translateZ(0); }
    to { -webkit-transform:rotate(360deg) translateZ(0); }
  }




#wrapper
  #scroller
    #pullDown
      %span.pullDownIcon
      %span.pullDownLabel
        Pull down to refresh...
      
    %ul#theItems
      - @items.each do |item|
        %li= render :partial => "items/item_mobile", :locals => {:item => item}
    
    #pullUp
      %span.pullUpIcon
      %span.pullUpLabel
        Pull up to refresh...
        
        
        
:javascript

  var last_item_id = #{@items.first.id}
  
  var myScroll,
    pullDownEl, pullDownOffset,
    pullUpEl, pullUpOffset,
    generatedCount = 0;
    
  function pullDownAction () {
    setTimeout(function () {	// <-- Simulate network congestion, remove setTimeout from production!
      var el, li, i;
      
      $.get('http://#{configatron.app_url}/items/' + last_item_id + '/since', function(data) {
        $('#theItems').prepend( data );
      });
      
      myScroll.refresh();		// Remember to refresh when contents are loaded (ie: on ajax completion)
    }, 1000);	// <-- Simulate network congestion, remove setTimeout from production!
  }
      
  function pullUpAction () {
    setTimeout(function () {	// <-- Simulate network congestion, remove setTimeout from production!
      var el, li, i;
      el = document.getElementById('theItems');
    
      for (i=0; i<3; i++) {
        li = document.createElement('li');
        li.innerText = 'Generated row ' + (++generatedCount);
        el.appendChild(li, el.childNodes[0]);
      }
    
      myScroll.refresh();		// Remember to refresh when contents are loaded (ie: on ajax completion)
    }, 1000);	// <-- Simulate network congestion, remove setTimeout from production!
  }

  function loaded() {
    pullDownEl = document.getElementById('pullDown');
    pullDownOffset = pullDownEl.offsetHeight;
    pullUpEl = document.getElementById('pullUp');	
    pullUpOffset = pullUpEl.offsetHeight;
    
    myScroll = new iScroll('wrapper', {
      useTransition: true,
      topOffset: pullDownOffset,
      onRefresh: function () {
        if (pullDownEl.className.match('loading')) {
          pullDownEl.className = '';
          pullDownEl.querySelector('.pullDownLabel').innerHTML = 'Pull down to refresh...';
        } else if (pullUpEl.className.match('loading')) {
          pullUpEl.className = '';
          pullUpEl.querySelector('.pullUpLabel').innerHTML = 'Pull up to load more...';
        }
      },
      onScrollMove: function () {
        if (this.y > 5 && !pullDownEl.className.match('flip')) {
          pullDownEl.className = 'flip';
          pullDownEl.querySelector('.pullDownLabel').innerHTML = 'Release to refresh...';
          this.minScrollY = 0;
        } else if (this.y < 5 && pullDownEl.className.match('flip')) {
          pullDownEl.className = '';
          pullDownEl.querySelector('.pullDownLabel').innerHTML = 'Pull down to refresh...';
          this.minScrollY = -pullDownOffset;
        } else if (this.y < (this.maxScrollY - 5) && !pullUpEl.className.match('flip')) {
          pullUpEl.className = 'flip';
          pullUpEl.querySelector('.pullUpLabel').innerHTML = 'Release to refresh...';
          this.maxScrollY = this.maxScrollY;
        } else if (this.y > (this.maxScrollY + 5) && pullUpEl.className.match('flip')) {
          pullUpEl.className = '';
          pullUpEl.querySelector('.pullUpLabel').innerHTML = 'Pull up to load more...';
          this.maxScrollY = pullUpOffset;
        }
      },
      onScrollEnd: function () {
        if (pullDownEl.className.match('flip')) {
          pullDownEl.className = 'loading';
          pullDownEl.querySelector('.pullDownLabel').innerHTML = 'Loading...';				
          pullDownAction();	// Execute custom function (ajax call?)
        } else if (pullUpEl.className.match('flip')) {
          pullUpEl.className = 'loading';
          pullUpEl.querySelector('.pullUpLabel').innerHTML = 'Loading...';				
          pullUpAction();	// Execute custom function (ajax call?)
        }
      }
    });
    
    setTimeout(function () { document.getElementById('wrapper').style.left = '0'; }, 800);
  }

  document.addEventListener('touchmove', function (e) { e.preventDefault(); }, false);
  document.addEventListener('DOMContentLoaded', function () { setTimeout(loaded, 200); }, false);
